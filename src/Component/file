import React from 'react'
import { useState, useEffect, useCallback } from 'react'

const Quiz = () => {
  let count = 0
  let allAnswers = []
  let correctIndex
  const [displayQuestion, updateDisplayQuestion] = useState([])
  const [token, setToken] = useState('')
  const [hasStarted, setHasStarted] = useState(false)
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [correctAnswer, setCorrectAnswer] = useState(0)

  const [queriesNumber, updateQuestionNumber] = useState(10)
  const [type, setType] = useState('multiple')
  const [difficulty, setDifficulty] = useState('easy')
  const [category, setCategory] = useState('20')
  

// Another idea I thought is maybe we can just make a new api call every time a user answers 10 questions?
// In the documentation it says if we add a token in the call, we'll never get the same question twice
// e.g. https://opentdb.com/api.php?amount=10&token=1a7c144744a41332e08c8ce743eb755a165cab405e356dfaab6beb7d65283482
// also if we change the token every few questions or every session, we can probably have unlimited questions?

  // get a token from the site to allow you to recieve data
  useEffect(() => {
    fetch('https://opentdb.com/api_token.php?command=request')
      .then(result => result.json())
      .then(result => setToken(result.token))
      .catch((err) => {
        alert(err, 'token cannot be found')
      })
  },[])

  // get data from the API using a token
  function runApi(){
    console.log(token)
    const fetchingData = async()=>{
      const res = await fetch(
        `https://opentdb.com/api.php?amount=${queriesNumber}&category=${category}&difficulty=${difficulty}&type=${type}&token=${token}`)
      const data = await res.json()
      updateDisplayQuestion(data.results)
    }
    fetchingData()
  }

  function checkAnswer(input){
    return input === correctAnswer ? console.log('correct!') : console.log('wrong!')
  }
  
  // takes wrong answers + correct answer from the API, shuffle them and display them for the user

  const displayAnswers = useCallback(()=>{
    let shuffled = [displayQuestion[currentQuestion].correct_answer]
    displayQuestion[currentQuestion].incorrect_answers.map((element) => {
      shuffled.push(element)
    })

    shuffled = shuffled.map((a) => ({ sort: Math.random(), value: a }))
      .sort((a, b) => a.sort - b.sort)
      .map((a) => a.value) 

    correctIndex = shuffled.indexOf(displayQuestion[currentQuestion].correct_answer)
    setCorrectAnswer(correctIndex)

    return shuffled.map((element, index) => {
      return ( 
        <div key={index}>
          <button value={index} onClick={()=> checkAnswer(index)}>{element}</button>
        </div>
      )
    })
  },[displayQuestion])


  return <> {!hasStarted && ( <>
  <select onChange={(e)=>updateQuestionNumber(e.target.value)}>
    <option> Number of Questions</option>
    <option value='5'>5</option>
    <option value='10'>10</option>
    <option value='15'>15</option>
    <option value='20'>20</option>
  </select>

  <select onChange={(e) => setCategory(e.target.value)}>
    <option value=''>Any</option>
    <option value='9'>General Knowledge</option>
    <option value='10'>Entertainment: Books</option>
    <option value='11'>Entertainment: Film</option>
    <option value='12'>Entertainment: Music</option>
    <option value='13'>Entertainment: Musicals and Theatres</option>
    <option value='14'>Entertainment: Television</option>
    <option value='15'>Entertainment: Video Games</option>
    <option value='16'>Entertainment: Board Games</option>
    <option value='31'>Entertainment: Japanese Anime and Manga</option>
    <option value='32'>Entertainment: Cartoon and Animations</option>
    <option value='29'>Entertainment: Comics</option>
    <option value='17'>Science and Nature</option>
    <option value='18'>Science: Computers</option>
    <option value='19'>Science: Maths</option>
    <option value='30'>Science: Gadgets</option>
    <option value='20'>Mythology</option>
    <option value='21'>Sports</option>
    <option value='22'>Geography</option>
    <option value='23'>History</option>
    <option value='24'>Politics</option>
    <option value='25'>Art</option>
    <option value='26'>Celebrities</option>
    <option value='27'>Animals</option>
    <option value='28'>Vehicles</option>
  </select>

  <select onChange={(e) => setDifficulty(e.target.value)}>
    <option value=''>Difficulty</option>
    <option value='easy'>Easy</option>
    <option value='medium'>Medium</option>
    <option value='hard'>Hard</option>
  </select>

  <select onChange={(e) => setType(e.target.value)}>
    <option value='multiple'>Multiple Choice</option>
    <option value='boolean'>True / False</option>
  </select>
  <button onClick={()=> {
    runApi()
    setHasStarted(true)
  }}>Start Quiz</button>
    </>) } 
    {hasStarted  && (
      displayQuestion.length > 0 && <>
      <div>{displayQuestion[currentQuestion].question}</div>
      {displayAnswers()}
      <button onClick={()=> setCurrentQuestion(currentQuestion + 1)}>Next question</button>
      {currentQuestion === queriesNumber && <p> Quiz Finish</p>}
      </>
    )}

 </> 
}
export default Quiz